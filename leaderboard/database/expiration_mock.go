// Code generated by MockGen. DO NOT EDIT.
// Source: leaderboard/database/expiration.go

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockExpiration is a mock of Expiration interface.
type MockExpiration struct {
	ctrl     *gomock.Controller
	recorder *MockExpirationMockRecorder
}

// MockExpirationMockRecorder is the mock recorder for MockExpiration.
type MockExpirationMockRecorder struct {
	mock *MockExpiration
}

// NewMockExpiration creates a new mock instance.
func NewMockExpiration(ctrl *gomock.Controller) *MockExpiration {
	mock := &MockExpiration{ctrl: ctrl}
	mock.recorder = &MockExpirationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpiration) EXPECT() *MockExpirationMockRecorder {
	return m.recorder
}

// ExpireMembers mocks base method.
func (m *MockExpiration) ExpireMembers(ctx context.Context, leaderboard string, members []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireMembers", ctx, leaderboard, members)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireMembers indicates an expected call of ExpireMembers.
func (mr *MockExpirationMockRecorder) ExpireMembers(ctx, leaderboard, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireMembers", reflect.TypeOf((*MockExpiration)(nil).ExpireMembers), ctx, leaderboard, members)
}

// GetEpirationLeaderboards mocks base method.
func (m *MockExpiration) GetEpirationLeaderboards(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpirationLeaderboards", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpirationLeaderboards indicates an expected call of GetEpirationLeaderboards.
func (mr *MockExpirationMockRecorder) GetEpirationLeaderboards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpirationLeaderboards", reflect.TypeOf((*MockExpiration)(nil).GetEpirationLeaderboards), ctx)
}

// GetMembersToExpire mocks base method.
func (m *MockExpiration) GetMembersToExpire(ctx context.Context, leaderboard string, amount int, maxTime time.Time) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembersToExpire", ctx, leaderboard, amount, maxTime)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembersToExpire indicates an expected call of GetMembersToExpire.
func (mr *MockExpirationMockRecorder) GetMembersToExpire(ctx, leaderboard, amount, maxTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembersToExpire", reflect.TypeOf((*MockExpiration)(nil).GetMembersToExpire), ctx, leaderboard, amount, maxTime)
}

// RemoveLeaderboardFromExpireList mocks base method.
func (m *MockExpiration) RemoveLeaderboardFromExpireList(ctx context.Context, leaderboard string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLeaderboardFromExpireList", ctx, leaderboard)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLeaderboardFromExpireList indicates an expected call of RemoveLeaderboardFromExpireList.
func (mr *MockExpirationMockRecorder) RemoveLeaderboardFromExpireList(ctx, leaderboard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLeaderboardFromExpireList", reflect.TypeOf((*MockExpiration)(nil).RemoveLeaderboardFromExpireList), ctx, leaderboard)
}
