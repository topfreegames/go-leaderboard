// Code generated by MockGen. DO NOT EDIT.
// Source: leaderboard/database/redis/redis.go

// Package redis is a generated GoMock package.
package redis

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRedis is a mock of Redis interface.
type MockRedis struct {
	ctrl     *gomock.Controller
	recorder *MockRedisMockRecorder
}

// MockRedisMockRecorder is the mock recorder for MockRedis.
type MockRedisMockRecorder struct {
	mock *MockRedis
}

// NewMockRedis creates a new mock instance.
func NewMockRedis(ctrl *gomock.Controller) *MockRedis {
	mock := &MockRedis{ctrl: ctrl}
	mock.recorder = &MockRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedis) EXPECT() *MockRedisMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockRedis) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockRedisMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedis)(nil).Del), ctx, key)
}

// Exists mocks base method.
func (m *MockRedis) Exists(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockRedisMockRecorder) Exists(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRedis)(nil).Exists), ctx, key)
}

// ExpireAt mocks base method.
func (m *MockRedis) ExpireAt(ctx context.Context, key string, time time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireAt", ctx, key, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireAt indicates an expected call of ExpireAt.
func (mr *MockRedisMockRecorder) ExpireAt(ctx, key, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireAt", reflect.TypeOf((*MockRedis)(nil).ExpireAt), ctx, key, time)
}

// Ping mocks base method.
func (m *MockRedis) Ping(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockRedisMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRedis)(nil).Ping), ctx)
}

// SAdd mocks base method.
func (m *MockRedis) SAdd(ctx context.Context, key, member string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SAdd", ctx, key, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// SAdd indicates an expected call of SAdd.
func (mr *MockRedisMockRecorder) SAdd(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockRedis)(nil).SAdd), ctx, key, member)
}

// SMembers mocks base method.
func (m *MockRedis) SMembers(ctx context.Context, key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", ctx, key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMembers indicates an expected call of SMembers.
func (mr *MockRedisMockRecorder) SMembers(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockRedis)(nil).SMembers), ctx, key)
}

// SRem mocks base method.
func (m *MockRedis) SRem(ctx context.Context, key string, members ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SRem", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SRem indicates an expected call of SRem.
func (mr *MockRedisMockRecorder) SRem(ctx, key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockRedis)(nil).SRem), varargs...)
}

// TTL mocks base method.
func (m *MockRedis) TTL(ctx context.Context, key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", ctx, key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL.
func (mr *MockRedisMockRecorder) TTL(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockRedis)(nil).TTL), ctx, key)
}

// ZAdd mocks base method.
func (m *MockRedis) ZAdd(ctx context.Context, key string, members ...*Member) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockRedisMockRecorder) ZAdd(ctx, key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockRedis)(nil).ZAdd), varargs...)
}

// ZCard mocks base method.
func (m *MockRedis) ZCard(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCard indicates an expected call of ZCard.
func (mr *MockRedisMockRecorder) ZCard(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockRedis)(nil).ZCard), ctx, key)
}

// ZIncrBy mocks base method.
func (m *MockRedis) ZIncrBy(ctx context.Context, key, member string, increment float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrBy", ctx, key, member, increment)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZIncrBy indicates an expected call of ZIncrBy.
func (mr *MockRedisMockRecorder) ZIncrBy(ctx, key, member, increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrBy", reflect.TypeOf((*MockRedis)(nil).ZIncrBy), ctx, key, member, increment)
}

// ZRange mocks base method.
func (m *MockRedis) ZRange(ctx context.Context, key string, start, stop int64) ([]*Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", ctx, key, start, stop)
	ret0, _ := ret[0].([]*Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange.
func (mr *MockRedisMockRecorder) ZRange(ctx, key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockRedis)(nil).ZRange), ctx, key, start, stop)
}

// ZRangeByScore mocks base method.
func (m *MockRedis) ZRangeByScore(ctx context.Context, key, min, max string, offset, count int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScore", ctx, key, min, max, offset, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeByScore indicates an expected call of ZRangeByScore.
func (mr *MockRedisMockRecorder) ZRangeByScore(ctx, key, min, max, offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScore", reflect.TypeOf((*MockRedis)(nil).ZRangeByScore), ctx, key, min, max, offset, count)
}

// ZRank mocks base method.
func (m *MockRedis) ZRank(ctx context.Context, key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRank", ctx, key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRank indicates an expected call of ZRank.
func (mr *MockRedisMockRecorder) ZRank(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRank", reflect.TypeOf((*MockRedis)(nil).ZRank), ctx, key, member)
}

// ZRem mocks base method.
func (m *MockRedis) ZRem(ctx context.Context, key string, members ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZRem", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZRem indicates an expected call of ZRem.
func (mr *MockRedisMockRecorder) ZRem(ctx, key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockRedis)(nil).ZRem), varargs...)
}

// ZRevRange mocks base method.
func (m *MockRedis) ZRevRange(ctx context.Context, key string, start, stop int64) ([]*Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRange", ctx, key, start, stop)
	ret0, _ := ret[0].([]*Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRange indicates an expected call of ZRevRange.
func (mr *MockRedisMockRecorder) ZRevRange(ctx, key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRange", reflect.TypeOf((*MockRedis)(nil).ZRevRange), ctx, key, start, stop)
}

// ZRevRangeByScore mocks base method.
func (m *MockRedis) ZRevRangeByScore(ctx context.Context, key, min, max string, offset, count int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScore", ctx, key, min, max, offset, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeByScore indicates an expected call of ZRevRangeByScore.
func (mr *MockRedisMockRecorder) ZRevRangeByScore(ctx, key, min, max, offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScore", reflect.TypeOf((*MockRedis)(nil).ZRevRangeByScore), ctx, key, min, max, offset, count)
}

// ZRevRank mocks base method.
func (m *MockRedis) ZRevRank(ctx context.Context, key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRank", ctx, key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRank indicates an expected call of ZRevRank.
func (mr *MockRedisMockRecorder) ZRevRank(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRank", reflect.TypeOf((*MockRedis)(nil).ZRevRank), ctx, key, member)
}

// ZScore mocks base method.
func (m *MockRedis) ZScore(ctx context.Context, key, member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScore", ctx, key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZScore indicates an expected call of ZScore.
func (mr *MockRedisMockRecorder) ZScore(ctx, key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScore", reflect.TypeOf((*MockRedis)(nil).ZScore), ctx, key, member)
}
