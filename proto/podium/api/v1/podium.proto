syntax = "proto3";
package podium.api.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

service PodiumAPI {
    rpc HealthCheck (google.protobuf.Empty) returns (HealthCheckResponse);
    rpc Status (google.protobuf.Empty) returns (StatusResponse);
    rpc RemoveLeaderboard (RemoveLeaderboardRequest) returns (BasicResponse) {
        option (google.api.http) = {
            delete: "/l/{leaderboard_id}"
        };
    }
    rpc BulkUpsertScores (BulkUpsertScoresRequest) returns (MemberListResponse) {
        option (google.api.http) = {
            put: "/l/{leaderboard_id}/scores"
            body: "score_upserts"
        };
    }
    rpc UpsertScore (UpsertScoreRequest) returns (DefaultMemberResponse) {
        option (google.api.http) = {
            put: "/l/{leaderboard_id}/members/{member_public_id}/score"
            body: "score_change"
        };
    }
    rpc TotalMembers (TotalMembersRequest) returns (TotalMembersResponse) {
        option (google.api.http) = {
            get: "/l/{leaderboard_id}/members-count"
        };
    }
    rpc IncrementScore (IncrementScoreRequest) returns (DefaultMemberResponse) {
        option (google.api.http) = {
            patch: "/l/{leaderboard_id}/members/{member_public_id}/score"
            body: "body"
        };
    }
    rpc GetMember (GetMemberRequest) returns (DefaultMemberResponse) {
        option (google.api.http) = {
            get: "/l/{leaderboard_id}/members/{member_public_id}"
        };
    }
    rpc GetMembers (GetMembersRequest) returns (GetMembersResponse) {
        option (google.api.http) = {
            get: "/l/{leaderboard_id}/members"
        };
    }
    rpc RemoveMember (RemoveMemberRequest) returns (BasicResponse) {
        option (google.api.http) = {
            delete: "/l/{leaderboard_id}/members/{member_public_id}"
        };
    }
    rpc RemoveMembers (RemoveMembersRequest) returns (BasicResponse) {
        option (google.api.http) = {
            delete: "/l/{leaderboard_id}/members"
        };
    }
    rpc GetRank (GetRankRequest) returns (GetRankResponse) {
        option (google.api.http) = {
            get: "/l/{leaderboard_id}/members/{member_public_id}/rank"
        };
    }
    rpc GetAroundMember (GetAroundMemberRequest) returns (MemberListResponse) {
        option (google.api.http) = {
            get: "/l/{leaderboard_id}/members/{member_public_id}/around"
        };
    }
    rpc GetTopMembers (GetTopMembersRequest) returns (MemberListResponse) {
        option (google.api.http) = {
            get: "/l/{leaderboard_id}/top/{page_number}"
        };
    }
    rpc GetTopPercentage (GetTopPercentageRequest) returns (MemberListResponse) {
        option (google.api.http) = {
            get: "/l/{leaderboard_id}/top-percent/{percentage}"
        };
    }
    rpc UpsertScoreMultiLeaderboards (MultiUpsertScoreRequest) returns (MultiUpsertScoreResponse) {
        option (google.api.http) = {
            put: "/m/{member_public_id}/scores"
            body: "score_multi_change"
        };
    }

}

message HealthCheckResponse {
    string working_string = 1;
}

message StatusResponse {
    double error_rate = 1;
}

message RemoveLeaderboardRequest {
    string leaderboard_id = 1;
}

message ScoreUpsert {
    string publicID = 1;
    int64 score = 2;
}

message ScoreUpserts {
    repeated ScoreUpsert members = 1;
}

message BulkUpsertScoresRequest {
    string leaderboard_id = 1;
    bool prev_rank = 2;
    string scoreTTL = 3;
    ScoreUpserts score_upserts = 4;
}

message MemberResponse {
    string publicID = 1;
    double score = 2; //implemented as double because int64 is exported as string through grpc-gateway
    int64 int_score = 3; //the full int64 score received from Redis
    int32 rank = 4;
    int32 previous_rank = 5;
    int32 expire_at = 6;
    int32 position = 7;
}

message MemberListResponse {
    bool success = 1;
    repeated MemberResponse members = 2;
}

message ScoreChange {
    int64 score = 1;
}

message UpsertScoreRequest {
    string leaderboard_id = 1;
    string member_public_id = 2;
    bool prev_rank = 3;
    int32 scoreTTL = 4;
    ScoreChange score_change = 5;
}

message DefaultMemberResponse {
    bool success = 1;
    string publicID = 2;
    double score = 3; //implemented as double because int64 is exported as string through grpc-gateway
    int64 int_score = 4; //the full int64 score received from Redis
    int32 rank = 5;
    int32 previous_rank = 6;
    int32 expire_at = 7;
}

message BasicResponse {
    bool success = 1;
    string reason = 2;
}

message TotalMembersRequest {
    string leaderboard_id = 1;
}

message TotalMembersResponse {
    bool success = 1;
    int32 count = 2;
}

message IncrementScoreRequest {
    string leaderboard_id = 1;
    string member_public_id = 2;
    int32 scoreTTL = 3;

    message Body {
        int64 increment = 1;
    }

    Body body = 4;
}

message GetMemberRequest {
    string leaderboard_id = 1;
    string member_public_id = 2;
    string order = 3;
    bool scoreTTL = 4;
}

message GetMembersRequest {
    string leaderboard_id = 1;
    string order = 2;
    bool scoreTTL = 3;
    string ids = 4;
}

message GetMembersResponse {
    bool success = 1;
    repeated MemberResponse members = 2;
    repeated string notFound = 3;
}

message RemoveMemberRequest {
    string leaderboard_id = 1;
    string member_public_id = 2;
}

message RemoveMembersRequest {
    string leaderboard_id = 1;
    string ids = 2;
}

message GetRankRequest {
    string leaderboard_id = 1;
    string member_public_id = 2;
    string order = 3;
}

message GetRankResponse {
    bool success = 1;
    string publicID = 2;
    int32 rank = 3;
}

message GetAroundMemberRequest {
    string leaderboard_id = 1;
    string member_public_id = 2;
    string order = 3;
    bool get_last_if_not_found = 4;
    int32 page_size = 5;
}

message GetTopMembersRequest {
    string leaderboard_id = 1;
    int32 page_number = 2;
    string order = 3;
    int32 page_size = 5;
}

message GetTopPercentageRequest {
    string leaderboard_id = 1;
    int32 percentage = 2;
    string order = 3;
}

message MultiUpsertScoreRequest {
    string member_public_id = 1;
    int32 scoreTTL = 2;
    bool prev_rank = 3;

    message ScoreMultiChange {
        int64 score = 1;
        repeated string leaderboards = 2;
    }

    ScoreMultiChange score_multi_change = 4;
}

message MultiUpsertScoreResponse {
    bool success = 1;

    message Member {
        string publicID = 1;
        double score = 2; //implemented as double because int64 is exported as string through grpc-gateway
        int64 int_score = 3; //the full int64 score received from Redis
        int32 rank = 4;
        int32 previous_rank = 5;
        int32 expire_at = 6;
        string leaderboardID = 8;
    }

    repeated Member scores = 2;
}